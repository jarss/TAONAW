#+TITLE: TAONAO Stuff
#+OPTIONS: num:nil toc:nil \n:nil
#+TODO: TODO(t) ACTIVE(a) WAITING(w) | PUBLISHED(p) CANCELLED(c)
#+hugo_base_dir: .
#+hugo_level_offset: 0y
#+hugo_auto_set_lastmod: %Y-%m-%d

* TAONAO Looks
** CSS Hacks

This enables dotted border under links /only/ for links in post. 
#+BEGIN_SRC CSS
.entry-content a {
  border-bottom-width: 1px;
  border-bottom-style: dotted;
}
#+END_SRC

The same is true for the textwidget, side bar. 
#+BEGIN_SRC CSS
.textwidget a {
border-bottom-width: 1px;
border-bottom-style: dotted;	
}
#+END_SRC

Fonts: 

Controlled by [[https://wordpress.org/plugins/easy-google-fonts/][Easy Google Fonts]]. In order to control some more
in depth elements (like lists, not just the usual <p>), the HTML
selectors need to be added in settings, and then a whole menu will
show for them under the theme's font setting. Then it can be turned
on.

** Plug-ins
  - [[https://wordpress.org/plugins/easy-google-fonts/][Easy Google Fonts]]: (see above)
  - [[https://wordpress.org/plugins/wp-markdown/][wp-markdown]]: allows me to copy-paste MD from Emacs. 

** Theme
Currently rocking Ajaira by Rakib. It has elemets that I like: 
- header is constant size, not HUGE photo like, at the top.
- traditional nav bar to the right
- mininmalist, black and white, with a little bit of decorations the
  way I like
  
* Content
:PROPERTIES:
:EXPORT_HUGO_SECTION:
:END:

** About
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: About
  :END:

*** About JR
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: About
  :EXPORT_FILE_NAME: about
  :END:

This is about JR

** Blog
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: Blog
  :END:

*** PUBLISHED Libre and clothes                                   :Published:

 When I write, I live in Emacs (with the awesome [[https://github.com/altercation/solarized][Solorized]] theme)
 inside Org-Mode. 

 With time, I found that Org has already made me more effienet writer
 and note taker. I write notes in every meeting now, rather it's my
 "turn" or not. I write notes as I work, about every solution and every
 problem I'm facing. I write first thing in the morning, usually about
 org-related thoughts I had as I wake up, over a cup of Sumatra cofee
 (little almond milk, one pack of sugar). Quite honestly, Org makes me
 /feel/ good, because it's transparent. It's an extensions of my
 thoughts, continuing on one long line, uninterrupted, before I stop to
 think a second and relfect one what I was thinking (=X-q=).

 There's no pretending in Org. No fancy text, fonts, or even
 images. Style is only applied to function. It's a delicate balance
 which, with the Solirized theme, work extremly well (by the way, the
 [[http://observer.com/2015/02/meet-the-man-behind-solarized-the-most-important-color-scheme-in-computer-history/][story of the man who created Solorized]] is quite interesting and worth
 reading). There's also an inviting segue here about Linux, which is
 the Org-writing mindset extended into an operating system. But I'm
 joyfully digress.

 Alright then. But every now on then you need to present stuff, and
 this means you need to "dress up" so other people can talk to you and
 relate. The "Normals," so to speak, do not understand my Org
 dedication and often give me concerned looks when I type away, a
 single long line into a blank screen. The purity is empty, the lack of
 buttons and distracting elements feels threatening withough GUI
 guidance. Fine then, I can do fancy schmancy.

 Most Org-folk I've read and listened to talk about LaTex. In my case,
 that meant a full installation, which is huge. Over 2GB huge. Not
 worth it for concessional usage, especially since I work in Microsoft
 environment at work, and most people I'll share with will need .docx
 or .ppt format anyway. So for me, [[https://en.wikipedia.org/wiki/OpenDocument][.odt]] seems like a better answer.

 Two things are needed on my Emacs (version 25.2.1) for that: 

 1. *Download and install Libre Office*. It comes built in with many
    personal desktop-geared Ubuntu distros, but in my version (Mint) I
    chose to opt out at start. OK, not biggie, full Libre office suite
    is only 100MB, and I can do that. I see myself edit the
    concessional Word file or producing a PDF.

 2. *Add the following* to .emacs to turn on .odt option in the export
    dispatcher:
  
   ~`(eval-after-load "org"
   '(require 'ox-odt nil t))`~


 Now I can create the .dot file, which I can open in Libre Writer I
 just downloaded. Ooof. Hello GUI word proccessing, with weird paper
 screen restrictions look. And the white, the white! It burnsss
 usss.... But anyway. Overall things look excellent, but if I want to
 change fonts, move around images etc, now I can in a more eyecandy
 format without leaving Linux. Then again, if I really need to produce
 a document, I might as well save my .odt in Writer to a .docx and
 remote remote into my work computer, where Mirosoft reigns
 supreme. Options. We like having them, yes?

 Even another option I was considering is to use [[https://typora.io/][Typora]], which is a
 pretty markdown writer. It comes with [[https://en.wikipedia.org/wiki/Pandoc][Pandoc]], and can handle Word and
 PDF files. Typora does not exactly feel "Linux free" to me and seems
 heavily inspired by different "minimalist" Mac word processing apps,
 if that's your thing. It probably won't show in your distro's and
 require installation from a ppa. I used Typora for a while for
 markdown, but we've parted ways now.

 I'm curious how this will stand out when I present my notes (since
 I've became the unofficial note taker at work, for reasons mentioned
 above). But for now, I'm more than happy to take off the fancy clothes
 and slide back to my comfortable t-shirt and shorts and write in Org. 

*** PUBLISHED Agenda, and the benfit of having multiple files     :Published:

    I used to write all my tasks, personal and work, into one tasks.org
    file.

    On Sunday night, this was good. I had 5 tasks on my list, and I was
    ready to start my work week. But it didn't take long (two days
    actually) for tasks.org to become monster.org. It didn't happen
    because of the number of tasks, which I kept (more or less) under
    control. It happened because of the size of the projects I was
    working on. Setting up computers, encryption, and even elementary
    personal stuff like paying my bills; each task naturally grew to
    sub-tasks, and those in turn had their own notes and lists.

    My initial solution to that was to create a "Details" heading for
    the projects. It contained time rangers I worked on a project
    (entered manually), and links to other sources I needed. This kept
    extra information out of the way when I didn't need it. This caused
    two issues. First, I now had "Details" showing on my agenda, since
    my time-range was directly under that header. Second, things
    quickly got out of control on my Android phone with Orgzly. That's
    because Orgzly does not fold seondary headings. I had to deal with
    walls of texts which I had to scroll through before I got to the most
    recent ToDo items.
   
    As I was scratching my head at this, work and life continued. My
    tasks list grew each day - No, each couple of hours. Interruptions
    kept coming in, obscure urgent new projects oppoped up while older
    ones from previous weeks resurfaced. My list was quickly overtaken
    by work stuff, while personal projects remained in the background,
    often pushed down the list and out of view.
   
    Realizing that I can't handle just viewing my tasks.org on my phone
    anymore (toward the end of the week, I could barely do it even in
    Emacs) I started using the tool I should have used more from the
    beginning: The agenda.

*** The Agenda

   The agenda view changed everything. Opened from everywhere with a
   quick key combo, it enabled me to see everything that I need to
   do. This is thanks to one thing that survived through the mess was
   my method of /scheduling/ assignments I intended to work on that
   day or in the next couple of hours. I picked this habit from one of
   the old Org tutorials floating around, which I cannot find right
   now. Scheduling means I still had a wall of ToDo items in
   tasks.org, but I only scheduled up to 5 things I intended to work
   on. I am only human, after all. Scheduling showed me what I wanted
   to do, and ToDo keywords showed me assignments that I haven't yet
   scheduled, but need to at some point. I could view both
   comfortably from the agenda view with =C-c a n=.
   
   This proved to be effective not only in Emacs, but also in Orgzly,
   on my phone. Thanks to the "Scheduled" search, I now also have a
   widget on my homescreen, an affective todo list. There's even a
   check button to check off Items on this widget, which marks them as
   "done." Orgzly also does a good job at creating customized
   searches, so that I can specifically see what is scheduled for
   today vs what is scheduled for the next 3 days, or week. I can have
   another filter showing me my unscheduled ToDos as well, in case I
   want to start working on them. What a wonderful thing.

# Phone Screenshot here! 

   Working with the agenda, I realized I'm faster than before. At
   work, the first thing I do after I launch Emacs is to get into
   agenda view. From there, it is much faster to "tab in" to whatever
   task I need. This replaced my need for =C-x C-r=, recentf,
   since now I was not only in the file I need, but also in the
   /section/ I need. Even better: =C-x n s= can be used then to "zoom
   in" to the task at hand, blocking out the long list of other items. 
   
   In agenda, I was also able to quickly see tags and categories, edit
   properties, and most importantly, quickly schedule ToDos. As the
   agenda became my bread and butter, another small issue surfaced:
   the category property. Since I still used one file, I used the category
   property to differentiate between personal and work tasks. On the
   agenda, each schedule task was placed in a "Tasks" category by
   default, since that was the file I was using. Even when I did
   assigned a category from the agenda, I still had to do so for a child
   header (I thought these are supposed to be inharied, but this
   didn't seem to work). This may sound like aesthetics, but being
   able to filter out all personal/work tasks can be very handy. 
   
   I was also thinking of my issue of having multiple values for one
   property. This was a problem I was trying to solve for the last
   several weeks. As an example, consider a task of setting up several
   computers, where extra information such as serial numbers and
   models is needed. Up to that point, I had a header nested inside my
   task.org file, like "set up 4 computers." I used the custom
   property =:Serials:= followed by the serial numbers for set-up
   tasks: =:Serials: 1111 2222 3333 4444= etc. This didnt' work well,
   since Org considered the /whole/ thing, including spaces, as the
   value of the property "Serials." I could still search, using Swiper
   (Ivy is one of the first things I install), for the serial as text,
   but anything that has to do with properties as functions did not
   work. I asked about this in reddit and in IRC several times, but
   could not find a satisfactory solution to breaking down properties
   that way. Someone, at one point, offered a rather complicated
   function -- but I kept feeling this was a too common of an issue to
   be overlooked like that. Something more fundemental was off in the
   way I was working with Org, but I didn't know what it was. So I
   decided to "go back" and reflect again on how Org was meant to work
   originally.
   
   After re-reading some sections of the manual and watching [[https://www.youtube.com/watch?v%3DoJTwQvgfgMM#t%3D1m20s][Carsten
   Dominik's]] presentation back from 2008, I was reminded of Org-modes
   original built-in tools. In the lecture, Carsten emphasized [[https://orgmode.org/manual/Column-view.html][Column
   View]] in Org. It is something I saw in passing previously, but now
   that I was having a mess on my hands with properties, Column View
   glowed in a welcoming aura. A quick and efficient way to have a
   table of the computers' serial numbers (or users, or model...)
   right next to the header, in a comfortable layout? I needed this. I
   could set columns per header, if I wanted to, which meant more
   fiddling around with the specific laptop-setup task in my old
   method. Or... I could just have a set-up dedicated org file which will
   already have the column view for laptop-set up built in with the
   properties... Wait a minute.

# mind blow image

*** Using Multiple Org Files

   That was it. Everything I learned to this point came together in a
   torrent of thoughts. The solution to the properties problem was to
   have dedicated org files for each big project. After all, that's
   /exactly/ what the agenda was made for: to be used as the "glue"
   between them. This was why I was supposed to use agenda in the
   first place! As long as I had a task scheduled, it didn't matter
   what file it was in. All I need to do is to tab in, just like I did
   with tasks.org. The idea of having a list of tasks in one file was
   so ingrained in my head from all the apps I used in the past, I was
   blind to see what was under my nose.

   With the realization of needing to break tasks back to different
   files came the realization that I am probably squeezing too much
   data into one org file. After all, setting up laptops as a task is
   a /project/ in itself. It should include a heading for /each/
   laptop, along with a checklist of steps I do for each, with a log
   describing different issues I am having in the process. From the
   agenda, this looks just like another project I do during the week.
   it fits inside the tasks list and on my phone just the
   same. 
   
   I was in for another pleasent surprise: In my agenda, since now I
   seperated the setups to a different file, my category problem
   suddenly disappeared as well. All my laptop setups were shown as
   "setups" as a category, because this is the file they are
   in. Wow. So this is what happens when you stop fighting something and
   start using it the way it was meant to be used. 

*** Next Steps

I've been using the system above for almost a week now (this post has
been a week in the making). Here are some ideas about what's next.

1. +adoptive capture template for tickets+ this was done this morning!  I
   now have a capture template that automatically prompts me for the
   properties needed for each ticket I need to work on. It is then filed
   as a ToDo task in my weekly "tasks.org"
2. Should Figure out what to use tags for: work in progress. While categories
   have their place, tags are more fluid. For now, it seems like I'm
   gravitating toward creating "mind keywords" of certain topics or
   terms that I'm familiar with. These, in turn, should be good for
   searches since I think in these terms when I'm looking for
   something. For example, a task flagged with my boss's name tells me
   this is a task he's viewing actively, or a "wiki" tag tells me
   there's some good info stored in the notes of the tasks that I
   should probably store for later.
3. Learn to trust the system. It's /hard/ to let myself create tasks
   in different files. I still need my weekly "mind-dump" of a place
   where I throw in quick captures and tasks that are not big enough
   for their own file, but I should stop thinking of it as my weekly
   list of things I'm doing, since it's misleading. The agenda is what
   reflects that now.
*** Pixel = New iPhone

 It's not news to anyone (I hope) that Google is taking Apple on in its
 own game, and makes their phone very similar to the iPhone. This
 morning, as I used the new gestures to swipe app unwanted apps, I
 looked at the (ugly) back button next to the new pill button, and I
 couldn't lie to myself anymore. It sucks.

 I'd choose Android over iOS any day, and as a person who uses both on
 a daily basis (one for work, one personal), this choice is indeed
 repeated every day. There are the additional possibilities, like
 browsing your files. The excellent Google applications from Photos to
 Drive. Project Fi.

 Android has been bigger (and imho, better) than iOS for years, But
 recently Google decided they're done being the "underdog" in the phone
 business and decided to really push the Pixel mainstream. We have
 commercials, warranty service with Project Fi, even stores that pop up
 after each lunch. The ads clearly poke fun at Apple, the target
 audience is iPhone folks (because what other audience is there to
 steal from?), and Google is the new cool kid on the block. 

 To me, It feels more like Google is the angry younger twin brother. 

 It started with the headphones jack. Not a big issue on its own,
 besides the fact that Google /made/ it a big deal with the first
 Pixel - just to completly turn around with the Pixel 2. That was just
 the beginning. The prices went up. The materials are the same. Now we
 have the gestures and the notch. The problem I have with these is not
 Google is copying from the iPhone, which I learned to accept with my
 new Pixel2. The problem is that Google is copying /everything/ from
 the iPhone, including these terrible ideas. 

 I can stand on my soapbox all day and to preach against iPhones as
 much as I want. People who got used to it are not going to switch fast
 and happily pay premium fees for madiocare products. This, in my
 opinion, should be Apple's new slogan. I service Macs and Mac users
 every day, and it pains me to see how much money is thrown away at
 computers that preform worse with an army of expensive dogles like
 arms of a spider. But what alternative do they have, Windows 10? 

 It used to be different with phones. It used to be that with Google's
 brand, back in the Nexus days, you had this special phone very few
 knew about. A cheap, purely Google phone with (usually) a custom mod
 to match. I feel that these days, for the most part, are over. With the new Android Pie and the ges
*** PUBLISHED Three levels of Anger Management

 My last job taught me I have anger management issues. I tend to go into paranoid thoughts that can escalate quickly and get me really worked up. As I found out through bitter experience, anger is mostly damaging, though it could be a good motivator at times.

 When I recognize that I get worked up on some thought, I go into a routine I've developed:

 1. Don't act on it: 50% of the time, my brain makes up a scenario of "what if." It's important to /never/ react on these, because nothing was said or done in reality. If I'm right and the other party acts first and triggers me, continue to step 2. 
 2. No response: instead of acting on something that triggered me, give it the ignore treatment. There's no need to respond to everything a person is saying, especially if I suspect they're "trolling." Shrugging, smiling and nodding, leaving the immediate environment (if possible) - all work well. If the other party is pressing for reaction, continue to step 3. 
 3. Keep a cool head: allow time to respond, if needed. Use facts and evidence if possible to reinforce my case. Keep the response dry and factual, with as little emotion as possible. If the other party is not satisfied and keep pressing, continue to step 4. 
 4. Remain cool in face of emotional reaction: by this time, it's probably the other party that is reacting emotionally. At this point, I feel better already because I kept my cool so far. Remain cool and refuse to go into an angry fit, thus remain the "adult" in the room. 

 Most of the time, I do not need to go beyond step 2. I log events in my work journal (Org-mode), so I usually have evidence and facts to show when needed. Being able to vent in my journal and knowing I have this information helps me to maintain more control. 

*** CANCELLED Random Poly Thoughts?

 If I had a chance to go back to the past and find my younger, budding poly self, what advice would I give? 

 # image at https://themaindamie.files.wordpress.com/2015/07/0032.jpg

 *It exists. It works. You're not crazy.*

 I know you haven't heard the word polyamory before. It will be a couple of years before it becomes mainstream. People do it though, and lead a sucessful life where they enjoy fruitful, rewarding relationships. No, you don't have to get married and have 2.5 kids to be happy in life. As a matter of fact, you don't need to go to graduate school either, it won't do you any good besides puting you in debt, but that's a different discussion. 

 *Stay away from finicky people* 

 For some reason, they tend to be more attractive. I'm still trying to figure out why. But that doesn't mean they're good for you. And god help you if you fall for one. People can change, but they don't change much, and they change even less if they don't have a strong interest to do so. These folks are tourble.

 *Like with anything, money talks*

 Even if they're not big on materialistic things, the world is. You'll have to pay to date, you'll have to pay to maintain a place to be alone with them, and you'll have to pay to keep things working. You don't need to make a furtune, but it sure helps your chances finding someone and keep on dating them. In a poly world where this is a constant proccess, money also has to be constant. 

 *Invest in yourself, not your ideals*

 your ideals may change. People come and go. Love and feelings come and go. What you stay with at the end of the day are habits: even strong lasting relationships are rooted in habits. And you want to have good habits that keep you going. Keep learning new things, keep talking to new people, and damnit, keep exercising. 

 *Suffering is not a competition*

 Your mental pain tolarance is a curse. You're not as strong as you think you are (you whine to everyone around you constantly) but just strong enough to stay put. Don't do it,  it's not worth the mental agrrivation. You /can/ get a better job. You /can/ get a more worthwhile partner. If you keep yourself misrable, the only thing you get is misery. There's no light at the end of this tunnle, just Xanax. 

 *Sex must come second*

 This is a big one. You'll disocver sex late in the game, and good sex even later. Don't rush it, you'll end up with people you don't want to be around. Take your time, each person is a  mutual investment.

*** CANCELLED It's Time to Say Goodbye to OKCupid

 # Note to self: writing on my past is like going through a foggy maze. I can't collect all the details. It also seems OKC, while definitely going the Tinder way, is still pushing  messages you write forward. So swipes are not rewarded. 

 As a shy introvert, dating was always a challange for me. I was the geek in highschool without a girlfriend, deep into dungeon and dragons behind thick-rimmed glasses. I was a late bloomer. My first relationship in college was mostly about being "official" and less about the important stuff. 

 Sexually, I was a mess until my mid-twnties. I didn't know what to do to how to do. I would have totoally given up if it wasn't for my hormones, which unlike my terrible attempts at the time (an artifical mix of TV shows and stroies I heard from friends) were working overtime. 

 I don't remember exactly how I first met the first woman that startged changing thigns to me. She was 
*** Quick Capture Update
 I'm pretty satisfied with my Org-Capture templates, so I decided to post a quick update. Once learned, my Capture templates became the most change-prone parts of my init file (which is inside an org file). 

 In case you're new to org-mode and don't know how this works, [[https://orgmode.org/manual/Capture.html][Org-mode Capture]] is sort of a super-quick "new file from template" creator that is baked in. The official documents are a bit confusing (as usual, I find that these are more helpful once you /know/ how to use Org, not so friendly to newbies). Personally, I started my way looking at [[http://www.howardism.org/Technical/Emacs/journaling-org.html][this post]] from Howard and worked my way back to basics slowly from there. 

 The Capture Dispatcher(?) shortcut is C-c c for me. 

 Here we go: 

 #+BEGIN_SRC emacs-lisp
 (setq org-capture-templates
   (quote (
           ("r" "interruption" entry (file "~/Documents/Archive/OhSnap!.org")
         "* %? \n%U" :clock-in t)
           ("i" "INC" entry (file+headline "~/Documents/Archive/Week.org" "Incidents")
         "* TODO %?\n %^{Ticket}p %^{ID}p %^{Computer}p %^{Location}p")
           ("e" "event" entry (file+datetree "~/Documents/Archive/journal.org")
         "* %?\n" :clock-in t :tree-type week)
          )
   )
 )
 #+END_SRC

 *r is for Interruption*: I constantly get interrupted at work. So much so, as a matter of fact, that this labor day weekend I realized that my stress levels are even higher than originally realized. But that's for another time. It's important for me to capture the /length/ of the interruption, since these give me an idea of how long (total) my work flow has been interrupted. Since I usually do not use Capture as I work with Org, interruption is pretty accurate to measure unplanned stops. When I take a planned break, I don't log it as an interruption. 

 this template is triggered by "r" and shows as "interruption" on the dispatcher. it opens a new entry (a Org header) in my OhSnap!.org file, which is where all my "oh snap!" things go to. I clean it regularly. The entry starts with a * for the header (true for all of them). Then the %? is for where the cursor ends up at, which means I start typing here. \n means break to a new line (kind of like <br> in HTML). The "clock-in t" is "clock-in = true" which means it starts clocking the interruption as soon as I created it. It will stop the clock when I'm done typing and file it away. 

 *i is for INC (ticket)* I work in helpdesk environment (though my work extends beyond fixing computers and quick troubleshooting). This means lots of tickets. We work with a system that is web-based and offers less flexibility than desired to catalog our tasks. This template (and in a way, org-mode as a whole) helps me solve this problem and stay organized. Because I often end up asking for a ticket or creating a ticket for a situation (see above about interruptions...) I usually create / locate the ticket in our system first, and then hit this combo to copy the details from there. 

 this template is triggered by "i" and shows as "INC" for incident. Each ticket has a number like so: INC111111. It files the ticket in my weekly org file under the header "Incidents" where I keep these tickets. It creates a new header with a state of TODO automatically, and my cursor waits for me after the TODO keyword. in a new line, it prompts me for the following properties in this order: Ticket number, ID number, Computer (hostname) and location. I can skip one of these if they are not needed by hitting enter. This reassures that I get a nice ticket with all the information I need later, when I picked up my phone with the synced Week.org file. 

 *e is for Event* I have a back-and forth relationship with a journal in Org. This is because my workflow with Org is already made out of a lot of information. I constantly enter notes as tasks develop, rather work related or personal. As I learn new things, I tag them with a "wiki" tag as well, to remember to add them to my wiki org file (the name comes from my old wiki which I had around for two years). Be it as it may, I find that I still need to "vent" or just write something that does not fit under a task. In addition, there's the separation of work and personal notes that come to play here. I can keep more sensitive stuff in the journal file. Finally, there's something very soothing for me when I see my journal containing all my different thoughts in one place. So this morning, I decided to create this template yet again. 

 This template is triggered by "e" and shows as "Event". It uses Org's built in datetree feature, which automatically breaks an org file to headers that describe the year > month > day, or in my case, year > week > day. Since I review my work weekly and reflect every weekend, this format makes sense to me. A new entry for the day (including the time) is created each time I use this, all part of the datetree function. As such, the remainder is rather simple: New header, place cursor here (like before) to describe the header, and create a new line. The tree-type: week does what I explained above, changes from the monthly view to weekly one. 

*** First Post on Hugo
:PROPERTIES:
  :EXPORT_HUGO_SECTION: posts
  :EXPORT_FILE_NAME: First Hugo Post
  :END:

 /taps microphone/

 Uhm! Urm... testing, testing, 1 2...3?

 Can you guys here me over there?

 I'm writing this from ScarFace, in a basement of a house in Oregon, far from my native NYC on a vacation. It is 7AM, and I've been up since around 5 tinkering this laptop to work with Hugo.

 Makes me think I underestimate myself. I write frustrated toots on [[https://mastodon.technology/@jrss/100752549890521270][Mastodon]]   
*** Hugo - what takes so long?
  :PROPERTIES:
  :EXPORT_HUGO_SECTION: posts
  :EXPORT_FILE_NAME: Hugo: Beginnings
  :END:

 If you've been following me online for the last month or so (especially on reddit) you'd know I've been engaged in shifting away from WordPress and into the world [[https://gohugo.io/][Hugo]]. 

 I'd imagine the people of in [[https://www.reddit.com/r/emacs/][r/emacs]] would raise an eyebrow at the term "world of Hugo." After all, Hugo is a relatively simple program, not a deep rabbit-hole like Emacs. Yet, it's Hugo that got me overwhelemed, not so much Emacs. What? Really? 

 You see, it has to do with background and expectations. As a non-programmer (as in, someone who never wrote anything a bit more complicated then a few lines of shell script) Emacs was a mountain. Standing at the bottom, I gazed at the cloud shrowing its peek and told myself "well, you gotta take a first step somewhere..." so I did. For me, that was Org-mode. As a matter of fact, at the time, I didn't even know much about Emacs and how deep it can get. All I knew was that Org was cool, and I'm interested in learning more.

 After a couple of months, I got a bit more comfortable with Emacs and my level of doing things with it. I am still miles away from the top, and I'm fine with that. I got Emacs to do most of what I want it to do for me at this point, which is writing these posts, my journal entries, and of course my agenda and tasks both at work and at home. 

 Hugo, on the other hand, was meant to replace WordPress. As a person who used WordPress on and off a couple of years, I expected more or less the same thing. You know, going to my webiste online somewhere, log in with a username and password, navigate the GUI and post stuff, add plugins... As such, I didn't care for a change that much. Wordpress was working more or less OK, so why change to something similar and learn things all over again? 

 I get frequent alerts that my website is down from my webhost, but I got used to shrug these off. I got it as a cheap deal, and for about $6 a month or so hosting, what do you expect? People in the Emacs reddit mentioned they see more spam from my site's URL instead of my posts, but again, with 1 person complaining out of 10 or so, it wasn't a big deal. After all, SSL and https is for professional website that can afford it, and I am just an amatuer-ish blogger. Perhaps the biggest hurdle was Github: I knew people who use Hugo usually use Github to publish their blog, but they were all programmers. Me, I didn't know anything about Github or git. That was for coders, people who write scripts for a living. This is not me. I am not a porgrammer. 

 To be honest, I'm not sure what changed that perspective. Perhaps it was a random tutorial I saw about Git which made me realize it's not /that/ crazy complicated. Perhaps it was the fact that someone advised me not to link to my website again if I don't have https. Maybe it was just my inner geek, itching for a change, and WordPress was getting too familiar and too boring. Whatever it was, I took the bait, and I started doing all of it at once. 

 First I watched some Lynda videos about git and read a few posts. Then, I learned more about Hugo. After that, it was [[https://ox-hugo.scripter.co/][ox-hugo]]'s turn (because I gotta write my posts from inside Emacs), and then it was [[https://magit.vc/][Magit]] (because I gotta use git from inside Emacs). I think I went through everything in a matter of about a month. I learned too much too fast. But that's how I roll. I don't know why I do that to myself, and I'm not sure how it makes sense to go from "git is for coders" to "ALL THE THINGS," but I do anyway. 

 Obviously, this attitude has terrible consequences. You learn everything on a very shallow level, which means the first tiny bump in the road sends launches oyu out of control toward a tree. You get frustrated and you try again, just to hit another bump. Because you /learn everything/ you also expect to /know everything/ out of yourself, which is of course nonsense. But not everything is futile. Knowing what's the big picture in advance is not a bad idea. Learning a couple of things at once make you realize how they work together, and helps you develop a mindset that is more skilled at solving specific problems. Later, when you go look at the official documents, certain things already make sense to you even though they are completely new. 

 Be it as it may, it's not easy. I wouldn't recommend this method to anyone. it's basically doing damage control when you realize it's too late and this is how you function. But manuals never made sese to me. In the rare occessions where I do have the patience to read through the introduction, I'd forget what I wanted to do (or how to do it) by the time I get the real stuff. Besides, manuals are usually written by the people who made the program; as such, they are written from the inside, for insiders. Certain terms and syntax make aboslutely no sense to newcomers, who find that they struggle with basic terms that the veterans spit out as if they were born into it. Indeed, if there's one thing that kept running into when learning Emacs is /not/ to bother with its documentation. As helpful as it is, and as much as how everyone love to say all the help you ever want is C-h v (or a or whatever) away, it is not true. It is much, much easier to Google something up and find a blog post that exactually explains it to you in English. You know, in a way non-programmers speak. 

 I'm much further ahead than where I was when I started my Hugo ordeal. I have sucessfully launched a couple of testing websites, on and off Github. I have whined, complained, and whined again to anyone who would listen.


  


